/////////////////////////////////////////////////////////////////////////////////////////
//
// File name 	: vmClient.h
// Version 		: 1.0.0.0
// Brief 		: 
// Author 		: v.m.
// Create time 	: 6/7/2017 8:00:05
// Modify time 	: 6/7/2017 8:00:05
// Note 		:
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by Julong Co.LTD
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __VMCLIENT_H__
#define __VMCLIENT_H__

/////////////////////////////////////////////////////////////////////////////////////////
// include file
#include <WinSock2.h>

#include <vmBaseLib/CException.h>

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace

/////////////////////////////////////////////////////////////////////////////////////////
// class release 

/////////////////////////////////////////////////////////////////////////////////////////
// Todo : add application
/////////////////////////////////////////////////////////////////////////////////////////
//
// class define : vmTcpClient
//        Notes : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class vmTcpClient
{
/////////////////////////////////////////////////////////////////////////////////////////
// type define :

/////////////////////////////////////////////////////////////////////////////////////////
// data members :
private:
	SOCKET mSocket;

/////////////////////////////////////////////////////////////////////////////////////////
// interface define :

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
	vmTcpClient() :mSocket(INVALID_SOCKET){};											// Construct define
	~vmTcpClient(){};											// Destruct define
private:
	vmTcpClient(const vmTcpClient& obj){};					// No Copy
	vmTcpClient& operator = (const vmTcpClient& obj){}		// No Assignment

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
	void Connect(const char* const szIpAddr, int iPort)
	{
		if (mSocket!=INVALID_SOCKET)
		{
			shutdown(mSocket,SD_BOTH);
			closesocket(mSocket);
			mSocket = INVALID_SOCKET;
		}

		//创建套接字
		mSocket = ::socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
		if (mSocket == INVALID_SOCKET)
		{
			int liErrCode = WSAGetLastError();
			//throw CEXP("vmTcpClient::Connect(), Create socket failed!");
			std::cout << "Create Socket failed!" << std::endl;
		}
		//在这里可以bind一个本地地址
		//否则系统会自动安排

		//填写远程地址信息
		sockaddr_in servAddr;
		servAddr.sin_family = AF_INET;
		servAddr.sin_port = htons(iPort);

		//注意，这里要填写服务器程序（TCPServer程序）所在机器的IP地址
		//如果计算机没有联网，直接使用127.0.0.1即可
		servAddr.sin_addr.S_un.S_addr = inet_addr(szIpAddr);
		if (connect(mSocket, (sockaddr *)&servAddr, sizeof(servAddr)) == -1)
		{

			//throw CEXP("vmTcpClient::Connect(), Create socket failed!");
			std::cout << "Create Socket failed!" << std::endl;
		}
	};
	void Send(void* szBuf, unsigned int uiBufLen);
	void Recv(void* szBuf, const unsigned int cuiBufLen);
private:
protected:

}; // End of class vmClient
///////////////////////////////////////////////////////////////////////////////////////// 


/////////////////////////////////////////////////////////////////////////////////////////
#endif // __VMCLIENT_H__
/////////////////////////////////////////////////////////////////////////////////////////
// End of file vmClient.h
/////////////////////////////////////////////////////////////////////////////////////////