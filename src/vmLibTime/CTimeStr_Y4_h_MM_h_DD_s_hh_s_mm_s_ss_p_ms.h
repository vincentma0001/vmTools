/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CTimeStr_Y4_h_MM_h_DD_s_hh_c_mm_c_ss_p_ms.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2020/01/19 18:59:32
// Modify time  : 2020/01/19 18:59:32
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CTIMESTR_Y4_H_MM_H_DD_S_HH_C_MM_C_SS_P_MS_H__
#define __CTIMESTR_Y4_H_MM_H_DD_S_HH_C_MM_C_SS_P_MS_H__

/////////////////////////////////////////////////////////////////////////////////////////
// Include libs  :

/////////////////////////////////////////////////////////////////////////////////////////
// Include files :
// Standard c/c++ files included

// Config files included
#include <vmCfg/vmCfgtString.h>

// Platform files included

// Used files included
#include <vmLibTime/vmCfgTime.h>
#include <vmLibTime/CTimeStr.h>

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{
namespace vTime{

/////////////////////////////////////////////////////////////////////////////////////////

#ifndef Y4_h_MM_h_DD_s_hh_c_mm_c_ss_p_ms
#   define Y4_h_MM_h_DD_s_hh_c_mm_c_ss_p_ms vm::vTime::gp_Y4_h_MM_h_DD_s_hh_c_mm_c_ss_p_ms
#endif // !Y4_h_MM_h_DD_s_hh_c_mm_c_ss_p_ms

extern static const tchar* const gp_Y4_h_MM_h_DD_s_hh_c_mm_c_ss_p_ms = vT("%Y4-%MM-%DD %hh:%mm:%ss.%ms");

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CTimeStr__Y4_h_MM_h_DD_h_HH_c_mm_c_ss_p_ms : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
// h - Hyphen
// c - Colon 
// p - Period
// s - Space
// v - Virgule
class CTimeStr__Y4_h_MM_h_DD_h_HH_c_mm_c_ss_p_ms : public CTimeStr
{
/////////////////////////////////////////////////////////////////////////////////////////
// Typedefs :

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CTimeStr__Y4_h_MM_h_DD_h_HH_c_mm_c_ss_p_ms()
    : mpTimeFmt(vT("%u-%u-%u %u:%u:%u.%u"))
    {};
    // Destruct define
    virtual ~CTimeStr__Y4_h_MM_h_DD_h_HH_c_mm_c_ss_p_ms(){};
    
private:
    // No Copy
    CTimeStr__Y4_h_MM_h_DD_h_HH_c_mm_c_ss_p_ms(const CTimeStr__Y4_h_MM_h_DD_h_HH_c_mm_c_ss_p_ms& obj):mpTimeFmt(0){};
    // No Assignment
    CTimeStr__Y4_h_MM_h_DD_h_HH_c_mm_c_ss_p_ms& operator = ( const CTimeStr__Y4_h_MM_h_DD_h_HH_c_mm_c_ss_p_ms& obj ){};
    
/////////////////////////////////////////////////////////////////////////////////////////
// Members :
public:
    const tchar* const mpTimeFmt;

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
    bool Scanf( const tchar* const cpTimeString )
    {
        int liRet = sscanf_s( cpTimeString, mpTimeFmt, mulYear, mulMonth, mulDay, mulHour, mulMinute,mulSeconde, mulMSeconde );
    }

}; // End of class CTimeStr_Y4_MM_DD_HHss$ms
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vTime
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CTIMESTR_Y4_H_MM_H_DD_S_HH_C_MM_C_SS_P_MS_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CTimeStr_Y4_h_MM_h_DD_s_hh_c_mm_c_ss_p_ms$ms.h
/////////////////////////////////////////////////////////////////////////////////////////