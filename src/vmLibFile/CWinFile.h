/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CWinFile.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2019/12/30 16:36:42
// Modify time  : 2019/12/30 16:36:42
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CWINFILE_H__
#define __CWINFILE_H__

/////////////////////////////////////////////////////////////////////////////////////////
// Include files :


#ifndef   __VM_CFG_H__
#	error this file need #include <vmCfg.h>
#endif // __VM_CFG_H__
#include <vmCfg.h>

#include <vmLibBase/vmUtil.h>
#include <vmLibBase/CStrPtr.h>

#include <vmLibFile/CFileBase.h>

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CWinFile : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class DLL_API CWinFile : public CFileBase
{
/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CWinFile(){};
    explicit CWinFile( const char* const cpFName )
    {
        if ( cpFName == nullptr )
        {
            CFileBase::GetCurrName( mszPath, sizeof(mszPath) );
        }
        else
        {
            char* lpPos = v_strchr(  const_cast<char*>(cpFName), '\\' );
            if ( lpPos == nullptr )
            {
                char lsztFileDir[_V_FILE_MAX_DIR_] = {0x00};
                char* lpDir = CFileBase::GetCurrDir( lsztFileDir, sizeof(lsztFileDir) );
                if ( lpDir == nullptr ) { mulErrCode=GetLastError(); return;}

                v_sprintf( mszPath, sizeof(mszPath), vT("%s\\%s"), lsztFileDir, cpFName );
            }
        }

        errno_t loRet = _splitpath_s(mszPath, mszDriver, sizeof(mszDriver), mszDir, sizeof(mszDir), mszFName, sizeof(mszFName), mszExt, sizeof(mszExt));
        if (loRet != 0)
            mulErrCode = loRet;
        
    }
    ;
 
    // Destruct define
    virtual ~CWinFile();
    
public:
    // Copy construct define
    explicit CWinFile(const CWinFile& obj);
    // Assignment define
    CWinFile& operator = ( const CWinFile& obj ){ return *this; };
    
/////////////////////////////////////////////////////////////////////////////////////////
// members
public:

/////////////////////////////////////////////////////////////////////////////////////////
// Functions 
private:


}; // End of class CWinFile
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CFile : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class DLL_API CFile : public CWinFile
{
/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    CFile(const char* cpFName = nullptr);
    // Destruct define
    virtual ~CFile();

public:
    // Copy construct define
    CFile(const CFile& obj);
    // Assignment define
    CFile& operator = (const CFile& obj);

}; // End of class CFile
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CWINFILE_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CWinFile.h
/////////////////////////////////////////////////////////////////////////////////////////