/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CWinCS.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2020/01/04 17:38:11
// Modify time  : 2020/01/04 17:38:11
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CWINCS_H__
#define __CWINCS_H__

/////////////////////////////////////////////////////////////////////////////////////////
// include lib

/////////////////////////////////////////////////////////////////////////////////////////
// include file
#ifndef   _WINDOWS_
#	error this file need #include <windows.h>
#endif // _WINDOWS_

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CWinCS : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class CWinCS
{
/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CWinCS(DWORD dwSpinCount = 0xFA0)
    {
#if        ( WINVER  >= 0x0403 )
        ::InitializeCriticalSectionAndSpinCount(&mcWinCS, dwSpinCount);
#else  // !( WINVER  >= 0x0403 )
        ::InitializeCriticalSection(&mcWinCS);
#endif //  ( WINVER  >= 0x0403 )
    };
    // Destruct define
    virtual ~CWinCS()
    {
        ::DeleteCriticalSection(&mcWinCS);
    };
    
private:
    // No Copy
    CWinCS(const CWinCS& obj){};
    // No Assignment
    CWinCS& operator = ( const CWinCS& obj ){};
    
/////////////////////////////////////////////////////////////////////////////////////////
// members
private:
    CRITICAL_SECTION    mcWinCS;

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
    inline void Enter()
    {
#if        ( WINVER >= 0x0403 )
        ::TryEnterCriticalSection(&mcWinCS);
#else  // !( WINVER >= 0x0403 )
        ::EnterCriticalSection(&mcWinCS);
#endif //  ( WINVER >= 0x0403 )
    };
    inline void Leave()
    {
        ::LeaveCriticalSection(&mcWinCS);
    };

}; // End of class CWinCS
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CWINCS_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CWinCS.h
/////////////////////////////////////////////////////////////////////////////////////////