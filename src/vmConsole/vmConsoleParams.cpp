/////////////////////////////////////////////////////////////////////////////////////////
//
// File name 	: vmConsoleParams.cpp
// Version 		: 0.0.0.0
// Brief 		: 
// Author 		: v.m.
// Create time 	: 4/5/2017 13:29:58
// Modify time 	: 4/5/2017 13:29:58
// Note 		:
//
/////////////////////////////////////////////////////////////////////////////////////////
//
//
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// include file
#include <sstream>
#include <iostream>

#include "vmConsoleParams.h"

/////////////////////////////////////////////////////////////////////////////////////////
// macro define

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : GetParamsNum
// Full name : vm::vmConsoleParams::GetParamsNum
// Access    : public 
// Brief     : 
// Parameter : 
// Return    : unsigned int
// Notes     : 
unsigned int vm::vmConsoleParams::GetParamsNum()
{
	return mParams.size();
} // End of function GetParamsNum(...
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : GetParams
// Full name : vmConsoleParams::GetParams
// Access    : public 
// Brief     : 
// Parameter : 
// Return    : char**
// Notes     : 
const char** vmConsoleParams::GetParams()
{
	// 清空参数索引缓存区
	memset(mpParams, 0x00, sizeof(mpParams));

	// 对参数列表空间进行赋值
	unsigned int liParamsNum = mParams.size();
	if (liParamsNum > _MAX_CONSOLE_PARAMS_)
		return NULL;
	for (unsigned int i = 0; i < liParamsNum; i++)
	{
		mpParams[i] = mParams[i].c_str();
	}

	return mpParams;
} // End of function GetParams(...
/////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////
// Name      : AnalyzeInput
// Full name : vmConsoleParams::AnalyzeInput
// Access    : public 
// Brief     : 
// Parameter : 
// Return    : void
// Notes     : 
bool vmConsoleParams::AnalyzeInput()
{
	mParams.clear();

	// 获取输入命令行
	char cTmpBuf[1024];
	memset(cTmpBuf, 0, sizeof(cTmpBuf));
	std::cin.getline(cTmpBuf, 1024);

	// 分解输入命令行与参数
	std::stringstream  ssBuf(cTmpBuf);
	if (ssBuf.eof())
	{
		return false;
	}
	while (!ssBuf.eof())
	{
		std::string lstrTmp;
		ssBuf >> lstrTmp;

		mParams.push_back(lstrTmp);
	} // end of while( !ssBuf...

	return true;
} // End of function AnalyzeInput(...
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : GetCommand
// Full name : vmConsoleParams::GetCommand
// Access    : public 
// Brief     : 
// Parameter : 
// Return    : const char*
// Notes     : 
const char* vmConsoleParams::GetCommand()
{
	if (mParams.size() < 1)
	{
		return NULL;
	}

	return mParams[0].c_str();
} // End of function GetCommand(...
/////////////////////////////////////////////////////////////////////////////////////////


} // End of namespace vm

/////////////////////////////////////////////////////////////////////////////////////////
// End of file vmConsoleParams.cpp
/////////////////////////////////////////////////////////////////////////////////////////