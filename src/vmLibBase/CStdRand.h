/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CStdRand.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2020/01/04 20:36:59
// Modify time  : 2020/01/04 20:36:59
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CSTDRAND_H__
#define __CSTDRAND_H__

/////////////////////////////////////////////////////////////////////////////////////////
// Include files :

#ifndef   _RANDOM_
#   include <random>
#endif // _RANDOM_

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{
namespace vStd{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CRand : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class CRand
{
/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CRand() :mGen(std::random_device()){};
    // Destruct define
    virtual ~CRand(){};
    
private:
    // No Copy
    CRand(const CRand& obj){};
    // No Assignment
    CRand& operator = ( const CRand& obj ){};
    
/////////////////////////////////////////////////////////////////////////////////////////
// members
private:
    std::mt19937    mGen;

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
    long Random_Uniform(const long clMin, const long clMax)
    {
        std::uniform_int_distribution<> dis(clMin, clMax);
        return (long)dis(mGen);
    }
    long Random_Normal(const long clMin, const long clMax)
    {
        std::normal_distribution<> dis(clMin, clMax);
        return (long)dis(mGen);
    }
    long Random_Uniform(const long clMax)
    {
        std::uniform_int_distribution<> dis(0, clMax);
        return (long)dis(mGen);
    }
    long Random_Normal(const long clMax)
    {
        std::normal_distribution<> dis(0, clMax);
        return (long)dis(mGen);
    }


}; // End of class CRand
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vStd
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CSTDRAND_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CStdRand.h
/////////////////////////////////////////////////////////////////////////////////////////