/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CWinMutex.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2020/01/04 18:17:53
// Modify time  : 2020/01/04 18:17:53
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CWINMUTEX_H__
#define __CWINMUTEX_H__

/////////////////////////////////////////////////////////////////////////////////////////
// include lib

/////////////////////////////////////////////////////////////////////////////////////////
// include file
#include <vmCfg.h>
#include <windows.h>
#include <vmLibIPC/CWinKernal.h>
#include <vmLibIPC/CWinWaitObj.h>

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CWinMutex : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class CWinMutex : public CWinKernal
{
/////////////////////////////////////////////////////////////////////////////////////////
// type define :

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CWinMutex(){};
    // Destruct define
    virtual ~CWinMutex(){};
    
private:
    // No Copy
    CWinMutex(const CWinMutex& obj){};
    // No Assignment
    CWinMutex& operator = ( const CWinMutex& obj ){};

    
/////////////////////////////////////////////////////////////////////////////////////////
// members
private:

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
    void Enter()
    {
        vm::CWinWaitObj loObj;
        loObj.Wait( mhHandle );
    }
    void Leave()
    {
        Release();
    }

    enum emDesired
    {
        vAllAccess   = MUTEX_ALL_ACCESS,
        vModifyState = MUTEX_MODIFY_STATE
    };
   
    long Open( const tchar* const pName, unsigned long dwDesiredAccess, bool bInheritHandle )
    {
        mhHandle = OpenMutex(dwDesiredAccess,bInheritHandle,pName);
        return CheckHandle();
    }
    long Create( const tchar* const cpName, bool bInitialOwner )
    {
        mhHandle = CreateMutex( &mstSecurityAttributes, bInitialOwner, cpName );
        return CheckHandle();
    }
    bool Release ()
    {
        BOOL lbRet = ::ReleaseMutex(mhHandle);
        if ( lbRet == TRUE )
            return true;
    
        mulErrCode = GetLastError();
        return false;
    };

}; // End of class CWinMutex
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CWINMUTEX_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CWinMutex.h
/////////////////////////////////////////////////////////////////////////////////////////