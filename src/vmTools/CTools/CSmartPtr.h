/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CSmartPtr.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2020/01/10 11:09:24
// Modify time  : 2020/01/10 11:09:24
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CSMARTPTR_H__
#define __CSMARTPTR_H__

/////////////////////////////////////////////////////////////////////////////////////////
// Include libs  :

/////////////////////////////////////////////////////////////////////////////////////////
// Include files :
// Standard c/c++ files included
#ifndef   _INC_STDLIB
#   include <stdlib.h>
#endif // _INC_STDLIB

// Config files included

// Platform files included

// Used files included

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CAllocedPtr : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class CAllocedPtr
{
/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    CAllocedPtr( void*& pPointer ):mpPointer(pPointer){};
    // Destruct define
    virtual ~CAllocedPtr(){
        if ( mpPointer!=nullptr )
            free(mpPointer);
    };
    
private:
    // No Copy
    CAllocedPtr(const CAllocedPtr& obj):mpPointer(obj.mpPointer){};
    // No Assignment
    CAllocedPtr& operator = ( const CAllocedPtr& obj ){};
    
/////////////////////////////////////////////////////////////////////////////////////////
// Members :
private:
    void*& mpPointer;

}; // End of class CAllocedPtr
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CPointer : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
class CPointer
{
/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    CPointer(T*& pPointer) :mpPointer(pPointer) {};
    // Destruct define
    virtual ~CPointer() {
        if (mpPointer != nullptr)
            delete[] mpPointer;
    };

private:
    // No Copy
    CPointer(const CPointer& obj):mpPointer(obj.mpPointer) {};
    // No Assignment
    CPointer& CPointer = (const CPointer& obj) {};

/////////////////////////////////////////////////////////////////////////////////////////
// Members :
private:
    T*& mpPointer;

}; // End of class CPointer
/////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CSMARTPTR_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CSmartPtr.h
/////////////////////////////////////////////////////////////////////////////////////////