/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CMem.hpp
// Version      : 1.0.0.0
// Brief        : 此类封装了mem系列函数。
// Author       : v.m.
// Create time  : 2019/12/18 10:41:19
// Modify time  : 2019/12/18 10:41:19
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#ifndef __CMEM_H__
#define __CMEM_H__

/////////////////////////////////////////////////////////////////////////////////////////
// Include libs  :

/////////////////////////////////////////////////////////////////////////////////////////
// Include files :
// Standard c/c++ files included

// Config files included

// Platform files included

// Used files included
#ifndef   __CMEMPTR_H__
#   include <vmLibBase/CMemPtr.h>
#endif // __CMEMPTR_H__

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CMem : 此类封装了mem系列函数。
//
/////////////////////////////////////////////////////////////////////////////////////////
template <size_t sztBufSize>
class CMem : public CMemPtr
{
/////////////////////////////////////////////////////////////////////////////////////////
// Macro define :

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
	// Construct define
    explicit CMem();
    // Destruct define
    virtual ~CMem();
    
private:
    // No Copy define
    inline CMem(const CMem& obj){};
    // No Assignment
    inline CMem& operator = ( const CMem& obj ){};
    
/////////////////////////////////////////////////////////////////////////////////////////
// Members
private:
    tchar mszBuf[sztBufSize];

}; // End of class CMem
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Method    : CMem()
// Brief     : 构造函数
// Return    : null
// Parameter : null
template <size_t sztBufSize>
CMem<sztBufSize>::CMem():CMemPtr(mszBuf,sztBufSize),mszBuf{0x00}
{

};
// End of function CMem()
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Method    : ~CMem()
// Brief     : 析构函数
// Return    : null
// Parameter : null
template <size_t sztBufSize>
CMem<sztBufSize>::~CMem() 
{

};
// End of function ~CMem()
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CMEM_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CMem.h
/////////////////////////////////////////////////////////////////////////////////////////