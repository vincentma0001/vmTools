/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CWinEvent.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2020/01/11 20:02:36
// Modify time  : 2020/01/11 20:02:36
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CWINEVENT_H__
#define __CWINEVENT_H__

/////////////////////////////////////////////////////////////////////////////////////////
// Include libs  :

/////////////////////////////////////////////////////////////////////////////////////////
// Include files :
// Standard c/c++ files included

// Config files included
#include <vmCfg.h>

// Platform files included
#include <windows.h>

// Used files included
#include <vmLibIPC/CWinKernal.h>


/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CWinEvent : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class CWinEvent : public CWinKernal
{
/////////////////////////////////////////////////////////////////////////////////////////
// Typedefs :

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CWinEvent(){};
    // Destruct define
    virtual ~CWinEvent(){};

private:
    // No Copy
    CWinEvent(const CWinEvent& obj){};
    // No Assignment
    CWinEvent& operator = ( const CWinEvent& obj ){};

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
    long Create( const tchar* const cpName, bool bManualRest=false, bool bInitialize=false )
    {
        mhHandle = ::CreateEvent( &mstSecurityAttributes, bManualRest, bInitialize, cpName );
        return CheckHandle();
    }

    long Open( const tchar* const cpName, unsigned long dwDesiredAccess, bool bInheritHandle = false )
    {
        mhHandle = ::OpenEvent( dwDesiredAccess, bInheritHandle, cpName );
        return CheckHandle();
    }

    bool Set()
    {
        BOOL lbRet = ::SetEvent( mhHandle );
        if ( lbRet ==TRUE )
            return true;

        mulErrCode = GetLastError();
        return false;
    }

    bool Reset()
    {
        BOOL lbRet = ::ResetEvent( mhHandle );
        if ( lbRet == TRUE )
            return true;

        mulErrCode == GetLastError();
        return false;
    }

    bool Signal()
    {
        BOOL lbRet = ::PulseEvent(mhHandle);
        if ( lbRet == TRUE )
            return true;

        mulErrCode == GetLastError();
        return false;
    }
}; // End of class CWinEvent
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CWINEVENT_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CWinEvent.h
/////////////////////////////////////////////////////////////////////////////////////////