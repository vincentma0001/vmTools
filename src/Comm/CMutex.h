///////////////////////////////////////////////////////////////////////////////////
//
// File           : Mutex.h
// Version        : 1.0
// Function       : 
//
// Author         : vincent ma
// Date           : @date
//
// Notes          : 
//
// Modifications  :
//
// 
////////////////////////////////////////////////////////////////////////////////////
//
// Copyright :
//             This code is absolutely free to use and modify. The code is provided 
//             "as is" with no expressed or implied warranty. The author accepts 
//             no liability if it causes any damage to your computer, causes your 
//             pet to fall ill, increases baldness or makes your car start emitting 
//             strange noises when you start it up. This code has no bugs, just 
//             undocumented features!
//
////////////////////////////////////////////////////////////////////////////////////

#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef VIN_TOOLS_MUTEX_INCLUDED__
#define VIN_TOOLS_MUTEX_INCLUDED__

///////////////////////////////////////////////////////////////////////////////
// options :
//
///////////////////////////////////////////////////////////////////////////////
// add include file here
#ifndef _WINDOWS_
#	error this file need #include <windows.h>
#endif

///////////////////////////////////////////////////////////////////////////
// class CMutex
///////////////////////////////////////////////////////////////////////////
class CMutex
{
///////////////////////////////////////////////////////////////////////////
// data members
private :
	HANDLE m_hMutex;

///////////////////////////////////////////////////////////////////////////
// constructor & destructor
public :
	CMutex( LPCTSTR lpName, BOOL bInheritHandle = FALSE );
	~CMutex( void );

///////////////////////////////////////////////////////////////////////////
// member functions :
public :
	HANDLE GetHandle();;
	bool Release( void );
	void Wait() const;
	bool Wait(DWORD timeoutMillis) const;
};

///////////////////////////////////////////////////////////////////////////
// class AutoLock
///////////////////////////////////////////////////////////////////////////
class CWinMutexLocker
{
	// constructor & destructor :
public:
	CWinMutexLocker( CMutex& rhs );
	~CWinMutexLocker();
	
	// members :
private :
	CMutex& m_Mutex;
	
	// No copies do not implement
private :
//	CWinMutexLocker(const CWinMutexLocker &rhs):m_Mutex(rhs.m_Mutex){};
//	CWinMutexLocker &operator=(const CWinMutexLocker &rhs){};
};

///////////////////////////////////////////////////////////////////////////////
// namespace VIN::Win32::thread
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

#endif // VIN_TOOLS_MUTEX_INCLUDED__

///////////////////////////////////////////////////////////////////////////////
// End of files...
///////////////////////////////////////////////////////////////////////////////