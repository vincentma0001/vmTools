/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CErrno.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2019/12/31 10:24:43
// Modify time  : 2019/12/31 10:24:43
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CERRNO_H__
#define __CERRNO_H__

/////////////////////////////////////////////////////////////////////////////////////////
// include file
#ifndef   _INC_ERRNO
#	error this file need #include <errno.h>
#endif // _INC_ERRNO

#ifndef   __VM_CFG_H__
#	error this file need #include <vmCfg.h>
#endif // __VM_CFG_H__

#ifndef   __VM_UTIL_H__
#	error this file need #include <vmLibBase/vmUtil.h>
#endif // __VM_UTIL_H__

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CErrno : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class DLL_API CErrno
{
/////////////////////////////////////////////////////////////////////////////////////////
// Macro define :
#define _V_ERRNO_MAX_BUF_ 1024

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CErrno(){};
    // Destruct define
    virtual ~CErrno(){};
    
private:
    // No Copy
    CErrno(const CErrno& obj) {};
    // No Assignment
    CErrno& operator = ( const CErrno& obj ){ return *this; };
    
/////////////////////////////////////////////////////////////////////////////////////////
// members
public:
    // 错误代码
    static errno_t  moErrCode;
    
    // 错误信息
    static tchar     mszErrMsg[_V_ERRNO_MAX_BUF_];

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
    // 获取当前错误代码
    static errno_t toErrCode();
    // 判断iErrno是否存错误
    static bool isError( const int iErrno );
    // 判断是否存在errno错误
    static bool HasErrno();

    // 输出错误信息
    static tchar* MsgErrno();
    static tchar* MsgErrno(const errno_t oErrCode);

}; // End of class CErrno
/////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CERRNO_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CErrno.h
/////////////////////////////////////////////////////////////////////////////////////////