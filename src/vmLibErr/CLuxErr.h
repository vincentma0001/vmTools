/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CLuxErr.hpp
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2019/12/30 10:24:27
// Modify time  : 2019/12/30 10:24:27
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CLUXERR_HPP__
#define __CLUXERR_HPP__

/////////////////////////////////////////////////////////////////////////////////////////
// include file

#ifndef _LINUX_
#   error this file need #include linux 错误信息类
#endif // !_LINUX_

#ifndef __CERROR_H__
#   error this file need #include <CError.h>
#endif // ! __CERROR_H__

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm {

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CLuxErr : 此类为linux系统错误信息解析类
//
/////////////////////////////////////////////////////////////////////////////////////////
template <size_t sztBufSize>
class CLuxErr : public CErrBase<sztBufSize>
{
    ////////////////////////////////////////////////////////////////////////
    // Construct && Destruct
public:
    // Construct define
    explicit CLuxErr();
    explicit CLuxErr(const unsigned long cuiErrCode);
    // Destruct define
    virtual ~CLuxErr();

public:
    // Copy define
    CLuxErr(const CLuxErr<sztBufSize>& obj);
    // Assignment define
    CLuxErr& operator = (const CLuxErr<sztBufSize>& obj);

    /////////////////////////////////////////////////////////////////////////////////////////
    // Functions :
private:

    virtual char* ToCodeStr(char* pBufAddr, const size_t csztBufSzie, size_t& sztStrLen);

}; // End of class CLuxErr
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : CLuxErr()
// Brief     : 构造函数
// Return    : template <size_t sztBufSize>
// Parameter : void
template <size_t sztBufSize>
vm::CLuxErr<sztBufSize>::CLuxErr() :CErrBase<sztBufSize>(GetLastError())
{

}
// End of function CLuxErr()
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : CLuxErr()
// Brief     : 构造函数
// Return    : void
// Parameter : const unsigned long cuiErrCode       - 错误代码
template <size_t sztBufSize>
vm::CLuxErr<sztBufSize>::CLuxErr(const unsigned long cuiErrCode) :CErrBase<sztBufSize>(cuiErrCode)
{

}
// End of function CLuxErr()
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : ~CLuxErr()
// Brief     : 析构函数
// Return    : void
template <size_t sztBufSize>
vm::CLuxErr<sztBufSize>::~CLuxErr()
{

}
// End of function ~CLuxErr()
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : CLuxErr()
// Brief     : 拷贝构造函数
// Return    : void
// Parameter : obj                              - 拷贝源对象
template <size_t sztBufSize>
vm::CLuxErr<sztBufSize>::CLuxErr(const CLuxErr<sztBufSize>& obj)
{
    *this = obj;
}
// End of function CLuxErr()
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : operator=()
// Brief     :
// Return    : CLuxErr&                         - 返回当前对象
// Parameter : obj                              - 复制源对象
template <size_t sztBufSize>
vm::CLuxErr<sztBufSize>& vm::CLuxErr<sztBufSize>::operator=(const CLuxErr<sztBufSize>& obj)
{
    mulErrCode = obj.mulErrCode;
    return *this
}
// End of function operator=()
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : ToCodeStr(...)
// Brief     : 返回错误代码信息
// Return    : char*                            - 错误信息字符串
//             nullptr                          - 解析错误信息异常
// Parameter : pBufAddr                         - 错误信息缓存基地址
// Parameter : csztBufSzie                      - 错误信息缓存大小
// Parameter : sztStrLen                        - 生成的错误信息长度
template <size_t sztBufSize>
char* vm::CLuxErr<sztBufSize>::ToCodeStr(char* pBufAddr, const size_t csztBufSzie, size_t& sztStrLen)
{
    // TODO here need linux error code string translate function
    return "this is linux error this.";
}
// End of function ToCodeStr(...)
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CLUXERR_HPP__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CLuxErr.hpp
/////////////////////////////////////////////////////////////////////////////////////////