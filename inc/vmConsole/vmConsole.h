/////////////////////////////////////////////////////////////////////////////////////////
//
// File name 	: vmConsole.h
// Version 		: 2.0.0.0
// Brief 		: 
// Author 		: v.m.
// Create time 	: 4/5/2017 7:58:02
// Modify time 	: 4/5/2017 7:58:02
// Note 		:
//
/////////////////////////////////////////////////////////////////////////////////////////
//
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __VMCONSOLE_H__
#define __VMCONSOLE_H__

/////////////////////////////////////////////////////////////////////////////////////////
// include lib
#ifndef __VM_DLL__
#	define _DLL_API_ __declspec(dllimport)
#	pragma comment( lib,"vmConsole.lib" )
#else
#	define _DLL_API_ __declspec(dllexport)
#endif

/////////////////////////////////////////////////////////////////////////////////////////
// include file

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class define : vmConsole
//        Notes : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class _DLL_API_ vmConsole
{
/////////////////////////////////////////////////////////////////////////////////////////
// type define :
public:
	typedef bool(*PACTFUNC)(int argc, const char *argv[]);

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
	vmConsole();														// Construct define
	~vmConsole();														// Destruct define
private:
	vmConsole(const vmConsole& obj);									// No Copy
	vmConsole& operator = ( const vmConsole& obj );						// No Assignment
/////////////////////////////////////////////////////////////////////////////////////////
// members
private:

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
	// 注册命令行指令
	bool RegCase(const char* szCaseName, const char* szCaseNote, PACTFUNC pCaseFunc);
	// 运行控制台框架
	bool Run();

public:
	virtual bool Initialize();;
	virtual bool OnBegin();;
	virtual bool OnFailedCommandName( const char* szCommandName );

}; // End of class vmConsole
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __VMCONSOLE_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

#include <vmConsole.h>

bool DoAction1( int argc, char *argv[] )
{
	// Todo: do action 1
	std::cout << "This is action 1!" << std::endl;
	return true;
}

bool DoAction2( int argc, char *argv[] )
{
	// Todo: do action 2
	std::cout << "This is action 2!" << std::endl;
	return true;
}

void main( void )
{
	// initialize console object
	vmConsole loConsole;

	// regist action function
	loConsole.regist( "Action1", "this is action 1", DoAction1 );
	loConsole.regist( "Action2", "this is action 2", DoAction2 );

	// run console
	loConsole.run();
}

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file vmConsole.h
/////////////////////////////////////////////////////////////////////////////////////////