/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CWinModule.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2020/01/10 09:06:21
// Modify time  : 2020/01/10 09:06:21
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CWINDLL_H__
#define __CWINDLL_H__

/////////////////////////////////////////////////////////////////////////////////////////
// Include libs  :

/////////////////////////////////////////////////////////////////////////////////////////
// Include files :
// Standard c/c++ files included

// Config files included
#include <vmCfg.h>
#ifndef   __VM_CFG_H__
#	error this file need #include <vmCfg.h>
#endif // __VM_CFG_H__

// Platform files included
#include <windows.h>
#ifndef _WINDOWS_
#   error this file need #include<windows.h>
#endif // !_WINDOWS_

// Used files included

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CWinModule : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class CWinModule
{
/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    inline explicit CWinModule();
    inline explicit CWinModule( _vIn_ const char* const cpName );
    // Destruct define
    inline virtual ~CWinModule();
    
private:
    // No Copy
    inline CWinModule(const CWinModule& obj){};
    // No Assignment
    inline CWinModule& operator = ( const CWinModule& obj ){};

public:
    inline void* operator* ( );
    
/////////////////////////////////////////////////////////////////////////////////////////
// Members :
private:
    // 模块句柄
    void*         mhModule;
    // 错误代码
    unsigned long mulErrCode;

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:
    // 判断模块是否加载过
    inline bool isNull();

    // 判断是否出错
    inline bool HasError();
    // 返回出错代码
    inline unsigned long Errno();

    // 获取模块名称
    inline size_t ModuleName( _vOt_ char* const pBuf, _vIn_ const size_t sztBufSize );

public:
    // 加载模块
    inline bool  Load(_vIn_ const char* const szDllName);
    // 释放模块
    inline void  Free();
    // 获取模块函数
    inline void* Func(_vIn_ const char* szFuncName);

public:
    inline static size_t ModuleName( _vIn_ const void* const hModule, _vOt_ char* const pBuf, _vIn_ const size_t sztBufSize );

}; // End of class CWinModule
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : CWinModule(...)
// Brief     :
// Return    : 
CWinModule::CWinModule() :mhModule(0)
{

}
// End of function CWinModule(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : CWinModule(...)
// Brief     :
// Return    : 
// Parameter : const char * const cpName
CWinModule::CWinModule(_vIn_ const char* const cpName)
{
    Load(cpName);
}
// End of function CWinModule(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : ~CWinModule(...)
// Brief     :
// Return    : 
CWinModule::~CWinModule()
{
    Free();
}
// End of function ~CWinModule(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : operator*(...)
// Brief     :
// Return    : void*
void* CWinModule::operator*()
{
    return (void*)mhModule;
}
// End of function operator*(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : isNull(...)
// Brief     :
// Return    : bool
bool CWinModule::isNull()
{
    if (SUCCEEDED(mhModule)) 
        return true; 
    
    return false;
}
// End of function isNull(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : HasErr(...)
// Brief     :
// Return    : bool
bool CWinModule::HasError()
{
    if (mulErrCode != 0) 
        return true; 
    
    return false;
}
// End of function HasErr(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : Error(...)
// Brief     :
// Return    : unsigned long
unsigned long CWinModule::Errno()
{
    return mulErrCode;
}
// End of function Error(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : Load(...)
// Brief     :
// Return    : bool
// Parameter : _v_I_ const char * const szDllName
bool CWinModule::Load(_vIn_ const char* const szDllName)
{
    mhModule = ::LoadLibrary(szDllName);
    if (FAILED(mhModule))
    {
        mulErrCode = GetLastError();
        return false;
    }

    return true;
}
// End of function Load(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : Free(...)
// Brief     :
// Return    : void
void CWinModule::Free()
{
    if (mhModule != nullptr)
    {
        FreeLibrary((HMODULE)mhModule);
    }

    mhModule = nullptr;
}
// End of function Free(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : Func(...)
// Brief     :
// Return    : void*
// Parameter : _v_I_ const char * szFuncName
void* CWinModule::Func(_vIn_ const char* szFuncName)
{
    if (!SUCCEEDED(mhModule))
        return nullptr;


    FARPROC loProc = ::GetProcAddress((HMODULE)mhModule, szFuncName);
    if (loProc == NULL)
    {
        mulErrCode = GetLastError();
        return nullptr;
    }

    return (void*)loProc;
}
// End of function Func(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : ModuleName(...)
// Brief     :
// Return    : size_t
// Parameter : _v_O_ char * const pBuf
// Parameter : _v_I_ const size_t sztBufSize
size_t CWinModule::ModuleName(_vOt_ char* const pBuf, _vIn_ const size_t sztBufSize)
{
    DWORD ldwRet = ::GetModuleFileName((HMODULE)mhModule, pBuf, sztBufSize);
    if (ldwRet == 0)
        mulErrCode = GetLastError();

    return (size_t)ldwRet;
}
// End of function ModuleName(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// Name      : ModuleName(...)
// Brief     :
// Return    : size_t
// Parameter : _vIn_ const void * const hModule
// Parameter : _vOut_ char * const pBuf
// Parameter : _vIn_ const size_t sztBufSize
size_t CWinModule::ModuleName(_vIn_ const void* const hModule, _vOt_ char* const pBuf, _vIn_ const size_t sztBufSize)
{
    return ::GetModuleFileName((HMODULE)hModule, pBuf, sztBufSize);
}
// End of function ModuleName(...)
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CModule : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class CModule : public CWinModule
{
/////////////////////////////////////////////////////////////////////////////////////////
// Typedefs :

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CModule(){};
    explicit CModule(const char* const cpName):CWinModule(cpName){};

    // Destruct define
    virtual ~CModule(){};
    
private:
    // No Copy
    CModule(const CModule& obj){};
    // No Assignment
    CModule& operator = ( const CModule& obj ){};
    
/////////////////////////////////////////////////////////////////////////////////////////
// Members :
private:

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:

}; // End of class CModule
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CWINDLL_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CWinModule.h
/////////////////////////////////////////////////////////////////////////////////////////