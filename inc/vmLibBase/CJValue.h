/////////////////////////////////////////////////////////////////////////////////////////
//
// File name    : CJValue.h
// Version      : 0.0.0.0
// Brief        : 
// Author       : v.m.
// Create time  : 2020/01/07 10:13:19
// Modify time  : 2020/01/07 10:13:19
// Note         :
//
/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright : this file is copyright by v.m.'s tools lib
//
/////////////////////////////////////////////////////////////////////////////////////////
// compile macro definition
#if defined (_MSC_VER) && (_MSC_VER >= 1300)
#pragma once
#endif

#ifndef __CJVALUE_H__
#define __CJVALUE_H__

/////////////////////////////////////////////////////////////////////////////////////////
// Include libs  :

/////////////////////////////////////////////////////////////////////////////////////////
// Include files :
// Standard c/c++ files included
#include <string>
#include <vector>

// Config files included

// Platform files included

// Used files included'
#include <vmLibBase/CAny.hpp>

/////////////////////////////////////////////////////////////////////////////////////////
// using namespace
namespace vm{

/////////////////////////////////////////////////////////////////////////////////////////
//
// class CJValue : ## add class brief here ##
//
/////////////////////////////////////////////////////////////////////////////////////////
class CJValue
{
/////////////////////////////////////////////////////////////////////////////////////////
// Typedefs :
typedef enum  emType
{
    jBool   = 0,
    jNum    = 1,
    jData   = 2, 
    jValue  = 3
} *PEMT;

/////////////////////////////////////////////////////////////////////////////////////////
// Construct && Destruct
public:
    // Construct define
    explicit CJValue(){};
    // Destruct define
    virtual ~CJValue(){};
    
private:
    // No Copy
    CJValue(const CJValue& obj){};
    // No Assignment
    CJValue& operator = ( const CJValue& obj ){};
    
/////////////////////////////////////////////////////////////////////////////////////////
// Members :
private:
    std::string  mstrName;
    std::vector<std::string> mValues;
    emType  memType; 

/////////////////////////////////////////////////////////////////////////////////////////
// Functions :
public:

    bool isBool()   { return memType==emType::jBool ?true:false; };
    bool isNum()    { return memType==emType::jNum  ?true:false; };
    bool isValue()  { return memType==emType::jValue?true:false; };
    bool isData()   
    { 
        if (mValues.size()<=1 )
            return false;

        return true;
    }

    void Set( bool val )   { memType = emType::jBool; std::string lstrVal = (val == true?"true":"false");  mValues.push_back( lstrVal ); }
    void Set( int val )    { memType = emType::jNum;  std::string lstrVal = vm::CAny<128>(val).s_int();    mValues.push_back( lstrVal ); }
    void Set( double val ) { memType = emType::jNum;  std::string lstrVal = vm::CAny<128>(val).s_double(); mValues.push_back( lstrVal ); }
    

}; // End of class CJValue
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
} // End of namespace vm
/////////////////////////////////////////////////////////////////////////////////////////
#endif // __CJVALUE_H__
/////////////////////////////////////////////////////////////////////////////////////////
// usage :
/*

//*/
/////////////////////////////////////////////////////////////////////////////////////////
// End of file CJValue.h
/////////////////////////////////////////////////////////////////////////////////////////